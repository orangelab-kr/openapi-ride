// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model RideModel {
  rideId String @id @default(uuid())

  kickboardCode   String
  platformId      String
  franchiseId     String
  regionId        String?
  // 지역이 NULL일 수는 있으나 매출이 안잡힘

  discountGroupId String?
  discountId      String?
  insuranceId     String

  // 보험 정보
  userId   String
  realname String
  phone    String
  birthday DateTime

  // 반납 사진
  photo String?

  // 시작
  startedAt DateTime @default(now())

  startedPhoneLocationId String?
  startedPhoneLocation   LocationModel? @relation("StartedPhoneLocation", fields: [startedPhoneLocationId], references: [locationId])

  startedKickboardLocationId String?
  startedKickboardLocation   LocationModel? @relation("StartedKickboardLocation", fields: [startedKickboardLocationId], references: [locationId])

  // 종료(종료 시간, 종료 타입)
  terminatedAt   DateTime?
  terminatedType RideTerminatedType?

  terminatedPhoneLocationId String?
  terminatedPhoneLocation   LocationModel? @relation("TerminatedPhoneLocation", fields: [terminatedPhoneLocationId], references: [locationId])

  terminatedKickboardLocationId String?
  terminatedKickboardLocation   LocationModel? @relation("TerminatedKickboardLocation", fields: [terminatedKickboardLocationId], references: [locationId])

  receiptId String?
  receipt   ReceiptModel?  @relation(fields: [receiptId], references: [receiptId])
  payments  PaymentModel[]
  price     Int            @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ReceiptModel {
  receiptId String @id @default(uuid())

  standardId String
  standard   ReceiptUnitModel @relation("ReceiptUnitStandard", fields: [standardId], references: [receiptUnitId])

  perMinuteId String
  perMinute   ReceiptUnitModel @relation("ReceiptUnitPerMinute", fields: [perMinuteId], references: [receiptUnitId])

  surchargeId String
  surcharge   ReceiptUnitModel @relation("ReceiptUnitSurcharge", fields: [surchargeId], references: [receiptUnitId])

  rides     RideModel[]
  isNightly Boolean
  price     Int
  discount  Int
  total     Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ReceiptUnitModel {
  receiptUnitId String @id @default(uuid())

  price    Int
  discount Int
  total    Int

  standard  ReceiptModel[] @relation("ReceiptUnitStandard")
  perMinute ReceiptModel[] @relation("ReceiptUnitPerMinute")
  surcharge ReceiptModel[] @relation("ReceiptUnitSurcharge")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model LocationModel {
  locationId String @id @default(uuid())

  latitude  Float
  longitude Float

  startedPhoneLocation        RideModel[] @relation("StartedPhoneLocation")
  startedKickboardLocation    RideModel[] @relation("StartedKickboardLocation")
  terminatedPhoneLocation     RideModel[] @relation("TerminatedPhoneLocation")
  terminatedKickboardLocation RideModel[] @relation("TerminatedKickboardLocation")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum RideTerminatedType {
  USER_REQUESTED
  ADMIN_REQUESTED
  UNUSED
}

model PaymentModel {
  paymentId   String @id @default(uuid())
  description String @default("")

  platformId  String
  franchiseId String
  paymentType PaymentType
  amount      Int

  rideId      String
  ride        RideModel @relation(fields: [rideId], references: [rideId])
  refundedAt  DateTime?
  processedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum PaymentType {
  SERVICE
  SURCHARGE
}
